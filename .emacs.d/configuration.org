* Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Julian Thome"
      user-mail-address "julian.thome.de@gmail.com"
      calendar-latitude 49.815273
      calendar-longitude 6.129583
      calendar-location-name "Luxembourg")
#+END_SRC

* Useful functions

Read lines from file into list if file exists. It does not report and error
message for non-existing files.

#+BEGIN_SRC emacs-lisp
(defun edit-config ()
  "Edit my configuration file"
  (find-file "~/.emacs.d/configuration.org")
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun read-lines (filePath)
  "Return a list of lines of a file at filePath."
  (if (file-exists-p filePath)
      (with-temp-buffer
            (insert-file-contents filePath)
                  (split-string (buffer-string) "\n" t))
    ""
    )
)
#+END_SRC

List files under directory dir.

#+BEGIN_SRC emacs-lisp
(defun find-file-by-ext (dir ext) 
  (directory-files-recursively dir (concat ext "$")))
#+END_SRC

Rename file and buffer taken from [[https://stackoverflow.com/questions/384284/how-do-i-rename-an-open-file-in-emacs][stackoverflow]].

#+BEGIN_SRC emacs-lisp
(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))))
#+END_SRC

* Sensible default settings

Load path for loading homebrew packages.

#+BEGIN_SRC emacs-lisp
(let ((default-directory "/usr/local/share/emacs/site-lisp/"))
  (normal-top-level-add-subdirs-to-load-path))
#+END_SRC


Some sensible default settings some of which were taken from Harry
Schwartz' sensible default package https://github.com/hrs.

Disable backup.

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

Highlight current line.

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
#+END_SRC

Turn on word-wrapping.

#+BEGIN_SRC emacs-lisp
(setq line-move-visual nil)
#+END_SRC

Local variables.

Always set safe variables and ignore the others.

#+BEGIN_SRC emacs-lisp
(setq enable-local-variables :safe)
#+END_SRC

Increase the limit before calling garbage collection.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC

Always follow symlinks.

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

Don't assume that sentences should have two spaces after
period.

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

Enable transient mark mode.

#+BEGIN_SRC emacs-lisp
(transient-mark-mode t)
#+END_SRC

Delete selected text when providing input.
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1) 
#+END_SRC

Do not present the startup messge; clear scratch buffer.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)
#+END_SRC

Human readable units.

#+BEGIN_SRC emacs-lisp
(setq-default dired-listing-switches "-alh")
#+END_SRC

Don't ask `yes/no?', ask `y/n?'.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Enable syntax highlighting. 

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC

Automatically sync buffer after file change.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

Highlight matching parens.
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(setq show-paren-delay 0.0)
#+END_SRC

Do not hightlight text inside parens

#+BEGIN_SRC emacs-lisp
(setq show-paren-style 'parenthesis)
#+END_SRC

When you perform a problematic operation, flash the screen
instead of ringing the terminal bell.

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

Turn off alarms completely.

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC


Set the default line length to 80.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

When you double-click on a file in the Mac Finder open it as a
buffer in the existing Emacs frame, rather than creating a new
frame just for that file.

#+BEGIN_SRC emacs-lisp
(setq ns-pop-up-frames nil)
#+END_SRC

Store backups and auto-saved files in /tmp.

#+BEGIN_SRC emacs-lisp
(defun backup-to-temp-directory ()
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t))))

#+END_SRC

Keybindings.

#+BEGIN_SRC emacs-lisp
(setq default-font "Source Code Pro")
(setq default-font-size 16)
(setq current-font-size default-font-size)

(setq font-change-increment 1.1)

(defun font-code ()
  "Return a string representing the current font"
  (concat default-font "-" (number-to-string current-font-size)))

(defun set-font-size ()
  "Set the font to `default-font' at `current-font-size'.
Set that for the current frame, and also make it the default for
other, future frames."
  (let ((font-code (font-code)))
    (add-to-list 'default-frame-alist (cons 'font font-code))
    (set-frame-font font-code)))

(defun reset-font-size ()
  "Change font size back to `default-font-size'."
  (interactive)
  (setq current-font-size default-font-size)
  (set-font-size))

(defun increase-font-size ()
  "Increase current font size by a factor of `font-change-increment'."
  (interactive)
  (setq current-font-size
        (ceiling (* current-font-size font-change-increment)))
  (set-font-size))

(defun decrease-font-size ()
  "Decrease current font size by a factor of `font-change-increment', down to a minimum size of 1."
  (interactive)
  (setq current-font-size
        (max 1
             (floor (/ current-font-size font-change-increment))))
  (set-font-size))


(reset-font-size)
#+END_SRC

Save place.

#+BEGIN_SRC emacs-lisp
(require 'saveplace)
(setq auto-save-default nil)
(setq save-place-file "~/.emacs.d/saveplace")
(setq-default save-place t)
#+END_SRC

Iterm Mouse settings.

#+BEGIN_SRC emacs-lisp
(unless window-system
  (require 'mouse)
  (xterm-mouse-mode t)
  (defun track-mouse (e)) 
  (setq mouse-sel-mode t)
)
#+END_SRC

Show column no in mode line.

#+BEGIN_SRC emacs-lisp
(column-number-mode nil)
#+END_SRC

Backwards compatibility as default-buffer-file-coding-system
is deprecated in 23.2.

#+BEGIN_SRC emacs-lisp 
(if (boundp 'buffer-file-coding-system)
    (setq-default buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))
#+END_SRC


Define the global encoding as utf-8 english US related.

#+BEGIN_SRC emacs-lisp
(setq system-time-locale "en_US.utf8")
(prefer-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
#+END_SRC

* Melpa
** General config

Setup emacs package manager.

#+BEGIN_SRC emacs-lisp

(require 'package)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

(setq package-enable-at-startup nil)
(package-initialize)

(defun ensure-package-installed (&rest packages)
  "Assure every package is installed, ask for installation if it's not.
Return a list of installed packages or nil for every skipped package."
  (mapcar
   (lambda (package)
     (if (package-installed-p package)
	 nil
       (if (y-or-n-p (format  "Package %s is missing. Install it? " package))
	   (package-install package)
	 package)))
   packages))

;; Make sure to have downloaded archive description.
(or (file-exists-p package-user-dir)
    (package-refresh-content))

;; Activate installed packages.
(package-initialize)
#+END_SRC

** Packages

#+BEGIN_SRC emacs-lisp
(ensure-package-installed
      'helm 
      'evil 
      'evil-org
      'evil-surround
      'key-chord 
      'doom-themes 
      'fill-column-indicator
      'general 
      'hydra 
      'auctex 
      'flycheck 
      'exec-path-from-shell 
      'neotree 
      'auctex-latexmk 
      'org-bullets 
      'org-journal
      'powerline 
      'airline-themes 
      'solarized-theme 
      'helm-bibtex 
      'magit
      'evil-magit 
      'flyspell
      'projectile
      'helm-projectile
      'unicode-fonts
      'rust-mode
      'use-package
      'evil-mu4e
      'mu4e-maildirs-extension
)
#+END_SRC


Use =use-package= for loading packages on-demand.

#+BEGIN_SRC emacs-lisp
(setq use-package-verbose t)
(setq use-package-always-ensure t)

(require 'use-package)
#+END_SRC

* UI configuration

** General

Maintain consistent line height with Unicode characters.

#+BEGIN_SRC emacs-lisp
(unicode-fonts-setup)
#+END_SRC


Use nice lambdas.

#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; no menu and scroll bars
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

Column indicator.

#+BEGIN_SRC emacs-lisp
(require 'fill-column-indicator)
(setq fci-rule-width 1)
(setq fci-rule-column 80)
(add-hook 'after-change-major-mode-hook 'fci-mode)
(setq fci-rule-color "#a4adbc")
(setq fci-rule-character ?\u2502)
#+END_SRC


** Linum

#+BEGIN_SRC emacs-lisp
;; relative numbering
(linum-mode)
(linum-relative-global-mode)
#+END_SRC

** Airline

#+BEGIN_SRC emacs-lisp
(setq evil-emacs-state-cursor '("chartreuse3" (bar . 2)))
(require 'powerline)
(require 'airline-themes)
#+END_SRC

** Doom Theme

#+BEGIN_SRC emacs-lisp
(require 'doom-themes)

;; Global settings (defaults)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t
      nlinum-highlight-current-line t) ; if nil, italics is universally disabled

;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
;; may have their own settings.
(load-theme 'doom-one t)

(setq doom-line-numbers-style 'relative)

;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)

;; Corrects (and improves) org-mode's native fontification.
(doom-themes-org-config)
(set-face-attribute 'org-level-1 nil :height 1.0)
(load-theme 'airline-doom-one t)
#+END_SRC

* Packages
** AucTex

#+BEGIN_SRC emacs-lisp
;; AucTeX
(setq-default TeX-master nil)
(setq TeX-parse-self t) ; Enable parse on load.
(setq TeX-auto-save t) ; Enable parse on save.

(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)

(setq reftex-plug-into-AUCTeX t)
(setq TeX-PDF-mode t)
 
;; make latexmk available via C-c C-c
;; Note: SyncTeX is setup via ~/.latexmkrc (see below)
(add-hook 'LaTeX-mode-hook (lambda ()
  (push
    '("latexmk" "latexmk %s" TeX-run-TeX nil t
      :help "Run latexmk on file")
    TeX-command-list)))
(add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))

;; use Skim as default pdf viewer
;; Skim's displayline is used for forward search (from .tex to .pdf)
;; option -b highlights the current line; option -g opens Skim in the background  
(setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
(setq TeX-view-program-list
     '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

(add-hook 'TeX-mode-hook 'reftex-mode)
(add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
(setq TeX-source-correlate-method 'synctex)
(server-start) 
#+END_SRC

*** LatexMk

#+BEGIN_SRC
(auctex-latexmk-setup)
#+END_SRC

** NeoTree

#+BEGIN_SRC emacs-lisp
(require 'neotree)
(custom-set-faces
(set-face-attribute 'neo-button-face      nil :height 140)
(set-face-attribute 'neo-file-link-face   nil :height 140)
(set-face-attribute 'neo-dir-link-face    nil :height 140)
(set-face-attribute 'neo-header-face      nil :height 140)
(set-face-attribute 'neo-expand-btn-face  nil :height 140)
)
(setq neo-theme 'arrow)

(add-hook 'neotree-mode-hook
  (lambda ()
    (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
    (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
    (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
    (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)))
#+END_SRC

** Evil Mode

#+BEGIN_SRC emacs-lisp
(require 'key-chord)
(require 'evil)
(require 'hydra)
(require 'evil-surround)
(evil-mode 1)
(require 'general)
(general-evil-setup)
(key-chord-mode 1)

;; enable replacement in visual selection per default
(setq evil-ex-visual-char-range t)

(defvar comma-leader-map (make-sparse-keymap)
  "Keymap for \"leader key\" shortcuts.")
(define-key evil-normal-state-map "," comma-leader-map)


(defun my-run-latex ()
  (interactive)
  (TeX-save-document (TeX-master-file))
  (TeX-command "latexmk" 'TeX-master-file -1))

;; change the "leader" key to space
;; (define-key evil-normal-state-map "," 'evil-repeat-find-char-reverse)
;; (define-key evil-normal-state-map (kbd "SPC") comma-leader-map)

(defun close-and-kill-this-pane ()
      "If there are multiple windows, then close this pane and kill the buffer in it also."
      (interactive)
      (kill-this-buffer)
      (if (not (one-window-p))
          (delete-window)))
#+END_SRC


Enable surround everywhere.

#+BEGIN_SRC emacs-lisp
(global-evil-surround-mode 1)
#+END_SRC

** Projectile

Enable projectile with helm support.

#+BEGIN_SRC emacs-lisp
(projectile-global-mode)
(setq projectile-completion-system 'helm)
(helm-projectile-on)
#+END_SRC

Enable caching.

#+BEGIN_SRC emacs-lisp
(setq projectile-enable-caching t)
#+END_SRC

Use the current directory as root when not in a projectile project.

#+BEGIN_SRC emacs-lisp
(setq projectile-require-project-root nil)
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
(require 'helm)
(require 'helm-bibtex)
(setq helm-for-files-preferred-list '(helm-source-buffers-list
                                      helm-source-buffer-not-found
                                      helm-source-recentf
                                      helm-source-bookmarks
                                      helm-source-file-cache
                                      helm-source-files-in-current-dir
                                      ))

;;(define-key evil-normal-state-map (kbd "C-p") 'helm-multi-files)
(define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
(define-key helm-map (kbd "C-j") 'helm-next-line)
(define-key helm-map (kbd "C-k") 'helm-previous-line)
(autoload 'helm-bibtex "helm-bibtex" "" t)
(setq bibtex-completion-bibliography (find-file-by-ext (projectile-project-root) "\\.bib"))
(setq helm-bibtex-bibliography (find-file-by-ext (projectile-project-root) "\\.bib"))
#+END_SRC

** Linting
*** Flycheck

#+BEGIN_SRC emacs-lisp
(package-install 'flycheck)
(global-flycheck-mode)
(exec-path-from-shell-initialize)
#+END_SRC

*** Flyspell

#+BEGIN_SRC emacs-lisp
(require 'flyspell)
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
#+END_SRC

** Git

Git support for Emacs

#+BEGIN_SRC emacs-lisp
(require 'magit)
(require 'evil-magit)
#+END_SRC

** Org

Emacs code block.

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
             '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

Enable spell checking in Org-mode.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

Use the current window when editing a code snippet.

#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

Org states.

#+BEGIN_SRC emacs-lisp 
(setq org-todo-keywords
  '((sequence "IDEA" "TODO" "WAIT" "|" "DONE" "CANCELED")))
#+END_SRC

Record time where a todo was archived.

#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

Closed tasks are archived in '~/org/archive.org'.

#+BEGIN_SRC emacs-lisp
(setq org-archive-mark-done nil)

(defun mark-done-and-archive ()
  "Mark the state of an org-mode item as DONE and archive it."
  (interactive)
  (org-todo 'done)
  (org-archive-subtree))

(setq org-archive-location
      (concat "~/org/archive.org::* From %s"))

#+END_SRC

Org Journal.

#+BEGIN_SRC emacs-lisp
(require 'org-journal)
#+END_SRC

Pretty org bullets.

#+BEGIN_SRC emacs-lisp
(require 'org)
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

Evil keybindings.

#+BEGIN_SRC emacs-lisp
(require 'evil-org)
(add-hook 'org-mode-hook 'evil-org-mode)
(evil-org-set-key-theme '(navigation insert textobjects additional calendar))
(require 'evil-org-agenda)
(evil-org-agenda-set-keys)
#+END_SRC

Arrow that point downwards instead of ellipsis in org mode.

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "⤵")
#+END_SRC

Consider all files with suffix '-ag.org' in the agenda. They are simlinked to
inside the '~/org' directory.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (find-file-by-ext org-directory "-ag\\.org"))
#+END_SRC

Associate dot extension with ~graphviz-dot~ mode.

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+END_SRC


Automatically mark task as done when all subtasks are done (see [[https://orgmode.org/manual/Breaking-down-tasks.html][here]]).

#+BEGIN_SRC emacs-lisp
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC

*** Exporting

Translate regular quotes to curly quotes.

#+BEGIN_SRC emacs-lisp
(setq org-export-with-smart-quotes t)
#+END_SRC

Remove footer from HTML page.

#+BEGIN_SRC emacs-lisp
(setq org-html-postamble nil)
#+END_SRC

Set export directory to ~export_<format>~ (see [[http://rwx.io/blog/2016/03/11/Org-Export-Configurations/][here]]).

#+BEGIN_SRC emacs-lisp
(defvar org-export-output-directory-prefix "export_" "prefix of directory used for org-mode export")

(defadvice org-export-output-file-name (before org-add-export-dir activate)
  "Modifies org-export to place exported files in a different directory"
  (when (not pub-dir)
      (setq pub-dir (concat org-export-output-directory-prefix (substring extension 1)))
      (when (not (file-directory-p pub-dir))
       (make-directory pub-dir))))
#+END_SRC

** Rust

Enable rust mode.

#+BEGIN_SRC emacs-lisp
(require 'rust-mode)
#+END_SRC

** mu4e

At the moment mu4e is installed through homebrew with
=brew install mu --with-emacs --HEAD=.

#+BEGIN_SRC emacs-lisp
(require 'mu4e)
(require 'evil-mu4e)
(require 'org-mu4e)
(require 'mu4e-contrib)
(mu4e-maildirs-extension) 
#+END_SRC emacs-lisp

Use =mbsync= for fetching emails. The package has to be installed
with =brew install isync= first

#+BEGIN_SRC emacs-lisp
(define-key mu4e-headers-mode-map (kbd "o") 'mu4e-update-mail-and-index)
#+END_SRC


Rename file when moving them between directories

#+BEGIN_SRC emacs-lisp
(setq mu4e-change-filenames-when-moving t)
#+END_SRC


Polling interval.

#+BEGIN_SRC emacs-lisp
(setq mu4e-update-interval 300)

(setq mu4e-get-mail-command "mbsync inboxes"
  mu4e-update-interval 300
  mu4e-headers-auto-update t
) 
#+END_SRC

Quit without being prompted.

#+BEGIN_SRC emacs-lisp
(setq mu4e-confirm-quit nil)
#+END_SRC

Compose new messages with =C-x m= using m4e as default mail agent.

#+BEGIN_SRC emacs-lisp
(setq mail-user-agent 'mu4e-user-agent)
#+END_SRC

Org-style tables and spell checking in E-mail.

#+BEGIN_SRC emacs-lisp
(add-hook 'message-mode-hook 'turn-on-orgtbl)
(add-hook 'message-mode-hook 'turn-on-orgstruct++)
(add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
#+END_SRC

Display sender's address alongside their name.

#+BEGIN_SRC emacs-lisp
(setq mu4e-view-show-addresses t)
#+END_SRC

Save attachments in =~/mail-downloads=.

#+BEGIN_SRC emacs-lisp
(setq mu4e-attachment-dir "~/mail-downloads")
#+END_SRC

Open URL in browser with =C-c C-o=.

#+BEGIN_SRC emacs-lisp
(define-key mu4e-view-mode-map (kbd "C-c C-o") 'mu4e~view-browse-url-from-binding)
#+END_SRC

For HTML E-mails, read them in browser.

#+BEGIN_SRC emacs-lisp
(add-to-list 'mu4e-view-actions '("html in browser" . mu4e-action-view-in-browser) t)
#+END_SRC

If an E-mail is encrypted, response should be encrypted, too.

#+BEGIN_SRC emacs-lisp
(defun encrypt-responses ()
  (let ((msg mu4e-compose-parent-message))
    (when msg
      (when (member 'encrypted (mu4e-message-field msg :flags))
        (mml-secure-message-encrypt-pgpmime)))))

(add-hook 'mu4e-compose-mode-hook 'encrypt-responses)
#+END_SRC


Use msmtp for sending mails.

#+BEGIN_SRC emacs-lisp
(setq message-send-mail-function 'message-send-mail-with-sendmail)
(setq message-sendmail-extra-arguments '("--read-envelope-from"))
(setq message-sendmail-f-is-evil 't)
(setq sendmail-program "msmtp")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq mu4e-compose-context-policy 'ask-if-none
      mu4e-context-policy 'pick-first
      mu4e-maildir "~/Maildir"
      mu4e-contexts
      `(,(make-mu4e-context
            :name "yahoo"
            :enter-func (lambda () (mu4e-message "Switch to Yahoo"))
            :match-func (lambda (msg)
                          (when msg
                            (string-prefix-p "/maildir-yahoo" (mu4e-message-field msg :maildir))))

          :vars '((user-mail-address . "frostisch@yahoo.de")
                  (mu4e-refile-folder . "/yahoo/Draft")
                  (mu4e-sent-folder . "/yahoo/Gesendet")
                  (mu4e-trash-folder . "/yahoo/Trash")
                  (mu4e-drafts-folder . "/yahoo/Drafts")))))


#+END_SRC


#+BEGIN_SRC emacs-lisp
(require 'org-mu4e)
#+END_SRC

When storing a link to a message in the headers view, link to the message instead of the search that resulted in that view.

#+BEGIN_SRC emacs-lisp
(setq org-mu4e-link-query-in-headers-mode nil)
#+END_SRC


BBDB with mu4e.

Use BBDB to handle my address book.

#+BEGIN_SRC emacs-lisp
;;(require 'bbdb-mu4e)
#+END_SRC

Don’t try to do address completion with mu4e. Use BBDB instead.

#+BEGIN_SRC emacs-lisp
#+END_SRC

* Keybindings


Move to normal state.

#+BEGIN_SRC emacs-lisp
(key-chord-define evil-normal-state-map "jk" 'evil-force-normal-state)
(key-chord-define evil-visual-state-map "jk" 'evil-change-to-previous-state)
(key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
(key-chord-define evil-replace-state-map "jk" 'evil-normal-state)
(define-key evil-insert-state-map (kbd "ESC") 'evil-normal-state)
#+END_SRC

Automatically wrap paragraph with to a max line len of 80.

#+BEGIN_SRC emacs-lisp
(general-nmap "Q" (general-simulate-key "gqap"))
(general-vmap "Q" (general-simulate-key "gq"))
#+END_SRC

Scroll up and down.

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
(define-key evil-normal-state-map (kbd "C-d") 'evil-scroll-down)
#+END_SRC

Having words with 'ee' is quite common - so do not use this in insert mode

#+BEGIN_SRC emacs-lisp
(key-chord-define evil-normal-state-map "ee" 'evil-emacs-state)
(key-chord-define evil-emacs-state-map "ee" 'evil-normal-state)
#+END_SRC

LaTeX keybindings.

#+BEGIN_SRC emacs-lisp
(define-key comma-leader-map "lr" 'my-run-latex)
(define-key comma-leader-map "ls" 'TeX-view)
#+END_SRC

Buffer management.

#+BEGIN_SRC emacs-lisp
(define-key comma-leader-map "bn" 'next-buffer)
(define-key comma-leader-map "bp" 'previous-buffer)

(define-key comma-leader-map "bd" 'close-and-kill-this-pane)
(define-key comma-leader-map "x" 'save-buffers-kill-emacs)
#+END_SRC

Toggle NeoTree.

#+BEGIN_SRC emacs-lisp
(define-key comma-leader-map "f" 'neotree-toggle)
#+END_SRC

Archive Org todo's.

#+BEGIN_SRC emacs-lisp
(define-key comma-leader-map "a" 'mark-done-and-archive)
#+END_SRC

Change font sizes.

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-)") 'reset-font-size)
(define-key global-map (kbd "C-+") 'increase-font-size)
(define-key global-map (kbd "C-=") 'increase-font-size)
(define-key global-map (kbd "C-_") 'decrease-font-size)
(define-key global-map (kbd "C--") 'decrease-font-size)
#+END_SRC
