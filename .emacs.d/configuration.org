* Base configuration

Base editor configuration command

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq save-place-file "~/.emacs.d/saveplace")
(setq-default save-place t)
(require 'saveplace)
(global-hl-line-mode 1)
(setq inhibit-startup-screen t)
; always follow symlinks
(setq vc-follow-symlinks nil)
; always set safe variables and ignore the others
(setq enable-local-variables :safe)

;; ITERM2 MOUSE SUPPORT
    (unless window-system
      (require 'mouse)
      (xterm-mouse-mode t)
      (defun track-mouse (e)) 
      (setq mouse-sel-mode t)
    )


;; backwards compatibility as default-buffer-file-coding-system
;; is deprecated in 23.2.
(if (boundp 'buffer-file-coding-system)
    (setq-default buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))

;; Treat clipboard input as UTF-8 string first; compound text next, etc.
;;(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
(set-default-font "Source Code Pro 16")

;; ausgewählten Text bei Eingabe löschen
(delete-selection-mode 1) 

;; keine "yes-or-no"-Fragen - "y-or-n" reicht aus
(defalias 'yes-or-no-p 'y-or-n-p)

;; Zusammengehörende Klammern hervorheben
(show-paren-mode 1)
;; Text zwischen den Klammern nicht hervorheben
(setq show-paren-style 'parenthesis)

;; Aktuelle Spaltennummer in der Mode Line anzeigen
(column-number-mode nil)
;;(add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-16"))
#+END_SRC

* Melpa

Setup emacs package manager

#+BEGIN_SRC emacs-lisp


(setq package-list '(helm evil key-chord doom-themes fill-column-indicator general hydra tabbar auctex flycheck exec-path-from-shell neotree auctex-latexmk org-bullets powerline airline-themes solarized-theme helm-bibtex))

; list the repositories containing them

  (setq package-archives
        '(("marmalade"   . "http://marmalade-repo.org/packages/")
          ("gnu"         . "http://elpa.gnu.org/packages/")
          ("org"         . "http://orgmode.org/elpa/")
          ("melpa"       . "https://melpa.org/packages/")
          ("melpa-stable" . "https://stable.melpa.org/packages/")))


; activate all the packages (in particular autoloads)
(package-initialize)

; fetch the list of packages available 
(unless package-archive-contents
  (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))
#+END_SRC

* Setup Local Workspace
** Local Packages
#+BEGIN_SRC emacs-lisp
;;(setq seoul256-background 235)
;;(load-theme 'seoul256 t)
;; These two lines are just examples
;;(setq powerline-arrow-shape 'curve)
;;(setq powerline-default-separator-dir '(right . left))
;; These two lines you really need.
;;(setq sml/theme 'dark)
;;(setq sml/no-confirm-load-theme t)

;;(sml/setup)
#+END_SRC



** Package Configuration

*** Org mode
#+BEGIN_SRC emacs-lisp
(require 'org)
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

*** AucTex
#+BEGIN_SRC emacs-lisp
;; AucTeX
;; AucTeX
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(setq TeX-PDF-mode t)
 
;; make latexmk available via C-c C-c
;; Note: SyncTeX is setup via ~/.latexmkrc (see below)
(add-hook 'LaTeX-mode-hook (lambda ()
  (push
    '("latexmk" "latexmk %s" TeX-run-TeX nil t
      :help "Run latexmk on file")
    TeX-command-list)))
(add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))

;; use Skim as default pdf viewer
;; Skim's displayline is used for forward search (from .tex to .pdf)
;; option -b highlights the current line; option -g opens Skim in the background  
(setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
(setq TeX-view-program-list
     '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

(add-hook 'TeX-mode-hook 'reftex-mode)
(add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
(setq TeX-source-correlate-method 'synctex)
(server-start) 
#+END_SRC

**** LatexMk

#+BEGIN_SRC
(auctex-latexmk-setup)
#+END_SRC

*** NeoTree

#+BEGIN_SRC emacs-lisp
(require 'neotree)
(custom-set-faces
(set-face-attribute 'neo-button-face      nil :height 140)
(set-face-attribute 'neo-file-link-face   nil :height 140)
(set-face-attribute 'neo-dir-link-face    nil :height 140)
(set-face-attribute 'neo-header-face      nil :height 140)
(set-face-attribute 'neo-expand-btn-face  nil :height 140)
)
#+END_SRC

*** Evil Mode

#+BEGIN_SRC emacs-lisp
(require 'key-chord)
(require 'evil)
(require 'hydra)
(evil-mode 1)
(require 'general)
(general-evil-setup)
(key-chord-mode 1)
;;(define-key evil-normal-state-map (kbd "]b") 'next-buffer)
;;(define-key evil-normal-state-map (kbd "[b") 'previous-buffer)
;;(define-key evil-normal-state-map (kbd "C-S-h") 'evil-window-left)
;;(define-key evil-normal-state-map (kbd "C-S-j") 'evil-window-down)
;;(define-key evil-normal-state-map (kbd "C-S-k") 'evil-window-up)
;;(define-key evil-normal-state-map (kbd "C-S-l") 'evil-window-right):w

(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
(define-key evil-normal-state-map (kbd "C-d") 'evil-scroll-down)
(define-key evil-insert-state-map (kbd "ESC") 'evil-normal-state)
(general-nmap "Q" (general-simulate-key "gqap"))
(general-vmap "Q" (general-simulate-key "gq"))

(key-chord-define evil-normal-state-map "jk" 'evil-force-normal-state)
(key-chord-define evil-visual-state-map "jk" 'evil-change-to-previous-state)
(key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
(key-chord-define evil-replace-state-map "jk" 'evil-normal-state)

(key-chord-define evil-normal-state-map "ee" 'evil-emacs-state)
(key-chord-define evil-insert-state-map "ee" 'evil-emacs-state)
(key-chord-define evil-emacs-state-map "ee" 'evil-normal-state)

(defvar comma-leader-map (make-sparse-keymap)
  "Keymap for \"leader key\" shortcuts.")
(define-key evil-normal-state-map "," comma-leader-map)


(defvar bracket-leader-map (make-sparse-keymap)
  "Keymap for \"leader key\" shortcuts.")
(define-key evil-normal-state-map "[" bracket-leader-map)

(defun my-run-latex ()
  (interactive)
  (TeX-save-document (TeX-master-file))
  (TeX-command "latexmk" 'TeX-master-file -1))


(define-key comma-leader-map "lr" 'my-run-latex)
(define-key comma-leader-map "ls" 'TeX-view)

(define-key comma-leader-map "bn" 'next-buffer)
(define-key comma-leader-map "bp" 'previous-buffer)


;; change the "leader" key to space
;; (define-key evil-normal-state-map "," 'evil-repeat-find-char-reverse)
;; (define-key evil-normal-state-map (kbd "SPC") comma-leader-map)

(defun close-and-kill-this-pane ()
      "If there are multiple windows, then close this pane and kill the buffer in it also."
      (interactive)
      (kill-this-buffer)
      (if (not (one-window-p))
          (delete-window)))

(define-key comma-leader-map "bd" 'close-and-kill-this-pane)
(define-key comma-leader-map "x" 'save-buffers-kill-emacs)
(define-key comma-leader-map "f" 'neotree-toggle)

#+END_SRC

*** column indicator
#+BEGIN_SRC emacs-lisp
(require 'fill-column-indicator)
(setq fci-rule-width 1)
(setq fci-rule-column 80)
(add-hook 'after-change-major-mode-hook 'fci-mode)
(setq fci-rule-color "#a4adbc")
(setq fci-rule-character ?\u2502)
#+END_SRC


*** Powerline
#+BEGIN_SRC emacs-lisp
#+END_SRC

*** Helm
#+BEGIN_SRC emacs-lisp
(require 'helm)
(require 'helm-bibtex)
(setq helm-for-files-preferred-list '(helm-source-buffers-list
                                      helm-source-buffer-not-found
                                      helm-source-recentf
                                      helm-source-bookmarks
                                      helm-source-file-cache
                                      helm-source-files-in-current-dir
                                      ))

(define-key evil-normal-state-map (kbd "C-p") 'helm-multi-files)

(define-key helm-map (kbd "C-j") 'helm-next-line)
(define-key helm-map (kbd "C-k") 'helm-previous-line)
(autoload 'helm-bibtex "helm-bibtex" "" t)
(setq bibtex-completion-bibliography
      '("./thesis.bib"))
(setq helm-bibtex-bibliography '("./thesis.bib"))
#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp
(package-install 'flycheck)
(global-flycheck-mode)
(exec-path-from-shell-initialize)
#+END_SRC


*** Tabbar



#+BEGIN_SRC emacs-lisp
;;(setq seoul256-background 235)
;;(load-theme 'seoul256 t)
(linum-mode)
(linum-relative-global-mode)
(setq evil-emacs-state-cursor '("chartreuse3" (bar . 2)))
(require 'powerline)
(require 'airline-themes)


;;(load-theme 'solarized-dark t)
;; make the fringe stand out from the background
;;(setq solarized-distinct-fringe-background t)

;; Don't change the font for some headings and titles
;;(setq solarized-use-variable-pitch nil)

;; make the modeline high contrast
;;(setq solarized-high-contrast-mode-line t)

;; Use less bolding
;;(setq solarized-use-less-bold t)

;; Use more italics
;;(setq solarized-use-more-italic t)

;; Use less colors for indicators such as git:gutter, flycheck and similar
;;(setq solarized-emphasize-indicators nil)

;; Don't change size of org-mode headlines (but keep other size-changes)
;;(setq solarized-scale-org-headlines nil)

;; Avoid all font-size changes
;;(setq solarized-height-minus-1 1.0)
;;(setq solarized-height-plus-1 1.0)
;;(setq solarized-height-plus-2 1.0)
;;(setq solarized-height-plus-3 1.0)
;;(setq solarized-height-plus-4 1.0)



(require 'doom-themes)

;; Global settings (defaults)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t
      nlinum-highlight-current-line t) ; if nil, italics is universally disabled

;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
;; may have their own settings.
(load-theme 'doom-one t)

(setq doom-line-numbers-style 'relative)

;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)

;; Enable custom neotree theme
;;(doom-themes-neotree-config)  ; all-the-icons fonts must be installed!

;; Corrects (and improves) org-mode's native fontification.
(doom-themes-org-config)

(set-face-attribute 'org-level-1 nil :height 1.0)




(load-theme 'airline-doom-one t)
(setq neo-theme 'arrow)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
(evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
(evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
(evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
#+END_SRC


#+BEGIN_SRC emacs-lisp
;; Tabbar
(require 'tabbar)

;;(tabbar-mode 1)
;; Tabbar settings
;;(set-face-attribute
;; 'tabbar-default nil
;; :background "gray20"
;; :foreground "gray20"
;; :box '(:line-width 1 :color "gray20" :style nil))
;;(set-face-attribute
;; 'tabbar-unselected nil
;; :background "gray30"
;; :foreground "white"
;; :box '(:line-width 5 :color "gray30" :style nil))
;;(set-face-attribute
;; 'tabbar-selected nil
;; :background "gray75"
;; :foreground "black"
;; :box '(:line-width 5 :color "gray75" :style nil))
;;(set-face-attribute
;; 'tabbar-highlight nil
;; :background "white"
;; :foreground "black"
;; :underline nil
;; :box '(:line-width 5 :color "white" :style nil))
;;(set-face-attribute
;; 'tabbar-button nil
;; :box '(:line-width 1 :color "gray20" :style nil))
;;(set-face-attribute
;; 'tabbar-separator nil
;; :background "gray20"
;; :height 0.6)
;;
;; Change padding of the tabs
;; we also need to set separator to avoid overlapping tabs by highlighted tabs
(custom-set-variables
 '(tabbar-separator (quote (0.5))))
;; adding spaces
(defun tabbar-buffer-tab-label (tab)
  "Return a label for TAB.
That is, a string used to represent it on the tab bar."
  (let ((label  (if tabbar--buffer-show-groups
                    (format "[%s]  " (tabbar-tab-tabset tab))
                  (format "%s  " (tabbar-tab-value tab)))))
    ;; Unless the tab bar auto scrolls to keep the selected tab
    ;; visible, shorten the tab label to keep as many tabs as possible
    ;; in the visible area of the tab bar.
    (if tabbar-auto-scroll-flag
        label
      (tabbar-shorten
       label (max 1 (/ (window-width)
                       (length (tabbar-view
                                (tabbar-current-tabset)))))))))


; turn on the tabbar
(define-key evil-normal-state-map "]b" 'tabbar-forward-tab)
(define-key evil-normal-state-map "[b" 'tabbar-backward-tab)

#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes t)
#+END_SRC
