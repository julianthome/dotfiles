* Useful functions

Read lines from file into list if file exists. It does not report and error
message for non-existing files.

#+BEGIN_SRC emacs-lisp
(defun read-lines (filePath)
  "Return a list of lines of a file at filePath."
  (if (file-exists-p filePath)
      (with-temp-buffer
            (insert-file-contents filePath)
                  (split-string (buffer-string) "\n" t))
    ""
    )
)
#+END_SRC

* Base configuration
Base editor configuration command.

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq save-place-file "~/.emacs.d/saveplace")
(setq-default save-place t)
(require 'saveplace)
(global-hl-line-mode 1)
(setq inhibit-startup-screen t)
; always follow symlinks
(setq vc-follow-symlinks nil)
; always set safe variables and ignore the others
(setq enable-local-variables :safe)

;; ITERM2 MOUSE SUPPORT
(unless window-system
  (require 'mouse)
  (xterm-mouse-mode t)
  (defun track-mouse (e)) 
  (setq mouse-sel-mode t)
)

;; backwards compatibility as default-buffer-file-coding-system
;; is deprecated in 23.2.
(if (boundp 'buffer-file-coding-system)
    (setq-default buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))

;; Treat clipboard input as UTF-8 string first; compound text next, etc.
;;(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
(set-default-font "Source Code Pro 16")

;; ausgewählten Text bei Eingabe löschen
(delete-selection-mode 1) 

;; keine "yes-or-no"-Fragen - "y-or-n" reicht aus
(defalias 'yes-or-no-p 'y-or-n-p)

;; Zusammengehörende Klammern hervorheben
(show-paren-mode 1)
;; Text zwischen den Klammern nicht hervorheben
(setq show-paren-style 'parenthesis)

;; Aktuelle Spaltennummer in der Mode Line anzeigen
(column-number-mode nil)
;;(add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-16"))

#+END_SRC

* Melpa
** General config
Setup emacs package manager.

#+BEGIN_SRC emacs-lisp

(require 'package)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

(setq package-enable-at-startup nil)
(package-initialize)

(defun ensure-package-installed (&rest packages)
  "Assure every package is installed, ask for installation if it's not.
Return a list of installed packages or nil for every skipped package."
  (mapcar
   (lambda (package)
     (if (package-installed-p package)
	 nil
       (if (y-or-n-p (format  "Package %s is missing. Install it? " package))
	   (package-install package)
	 package)))
   packages))

;; Make sure to have downloaded archive description.
(or (file-exists-p package-user-dir)
    (package-refresh-content))

;; Activate installed packages.
(package-initialize)
#+END_SRC

** Packages

#+BEGIN_SRC emacs-lisp
(ensure-package-installed
      'helm 
      'evil 
      'evil-org
      'key-chord 
      'doom-themes 
      'fill-column-indicator
      'general 
      'hydra 
      'auctex 
      'flycheck 
      'exec-path-from-shell 
      'neotree 
      'auctex-latexmk 
      'org-bullets 
      'org-journal
      'powerline 
      'airline-themes 
      'solarized-theme 
      'helm-bibtex 
      'evil-magit 
      'flyspell)

; list the repositories containing them

#+END_SRC

* Setup Local Workspace
** Package Configuration
*** Linum

#+BEGIN_SRC emacs-lisp
;; relative numbering
(linum-mode)
(linum-relative-global-mode)
#+END_SRC

*** Airline

#+BEGIN_SRC emacs-lisp
(setq evil-emacs-state-cursor '("chartreuse3" (bar . 2)))
(require 'powerline)
(require 'airline-themes)
#+END_SRC

*** Doom Theme

#+BEGIN_SRC emacs-lisp
(require 'doom-themes)

;; Global settings (defaults)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t
      nlinum-highlight-current-line t) ; if nil, italics is universally disabled

;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
;; may have their own settings.
(load-theme 'doom-one t)

(setq doom-line-numbers-style 'relative)

;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)

;; Corrects (and improves) org-mode's native fontification.
(doom-themes-org-config)
(set-face-attribute 'org-level-1 nil :height 1.0)
(load-theme 'airline-doom-one t)
#+END_SRC

*** AucTex

#+BEGIN_SRC emacs-lisp
;; AucTeX
(setq-default TeX-master nil)
(setq TeX-parse-self t) ; Enable parse on load.
(setq TeX-auto-save t) ; Enable parse on save.

(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)

(setq reftex-plug-into-AUCTeX t)
(setq TeX-PDF-mode t)
 
;; make latexmk available via C-c C-c
;; Note: SyncTeX is setup via ~/.latexmkrc (see below)
(add-hook 'LaTeX-mode-hook (lambda ()
  (push
    '("latexmk" "latexmk %s" TeX-run-TeX nil t
      :help "Run latexmk on file")
    TeX-command-list)))
(add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))

;; use Skim as default pdf viewer
;; Skim's displayline is used for forward search (from .tex to .pdf)
;; option -b highlights the current line; option -g opens Skim in the background  
(setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
(setq TeX-view-program-list
     '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

(add-hook 'TeX-mode-hook 'reftex-mode)
(add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
(setq TeX-source-correlate-method 'synctex)
(server-start) 
#+END_SRC

**** LatexMk

#+BEGIN_SRC
(auctex-latexmk-setup)
#+END_SRC

*** NeoTree

#+BEGIN_SRC emacs-lisp
(require 'neotree)
(custom-set-faces
(set-face-attribute 'neo-button-face      nil :height 140)
(set-face-attribute 'neo-file-link-face   nil :height 140)
(set-face-attribute 'neo-dir-link-face    nil :height 140)
(set-face-attribute 'neo-header-face      nil :height 140)
(set-face-attribute 'neo-expand-btn-face  nil :height 140)
)
(setq neo-theme 'arrow)

(add-hook 'neotree-mode-hook
  (lambda ()
    (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
    (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
    (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
    (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)))
#+END_SRC

*** Evil Mode

#+BEGIN_SRC emacs-lisp
(require 'key-chord)
(require 'evil)
(require 'hydra)
(evil-mode 1)
(require 'general)
(general-evil-setup)
(key-chord-mode 1)

;; enable replacement in visual selection per default
(setq evil-ex-visual-char-range t)
;;(define-key evil-normal-state-map (kbd "]b") 'next-buffer)
;;(define-key evil-normal-state-map (kbd "[b") 'previous-buffer)
;;(define-key evil-normal-state-map (kbd "C-S-h") 'evil-window-left)
;;(define-key evil-normal-state-map (kbd "C-S-j") 'evil-window-down)
;;(define-key evil-normal-state-map (kbd "C-S-k") 'evil-window-up)
;;(define-key evil-normal-state-map (kbd "C-S-l") 'evil-window-right):w

(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
(define-key evil-normal-state-map (kbd "C-d") 'evil-scroll-down)
(define-key evil-insert-state-map (kbd "ESC") 'evil-normal-state)
(general-nmap "Q" (general-simulate-key "gqap"))
(general-vmap "Q" (general-simulate-key "gq"))

(key-chord-define evil-normal-state-map "jk" 'evil-force-normal-state)
(key-chord-define evil-visual-state-map "jk" 'evil-change-to-previous-state)
(key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
(key-chord-define evil-replace-state-map "jk" 'evil-normal-state)

(key-chord-define evil-normal-state-map "ee" 'evil-emacs-state)
;; having words with 'ee' is quite common - so do not use this in insert mode
;;(key-chord-define evil-insert-state-map "ee" 'evil-emacs-state)
(key-chord-define evil-emacs-state-map "ee" 'evil-normal-state)

(defvar comma-leader-map (make-sparse-keymap)
  "Keymap for \"leader key\" shortcuts.")
(define-key evil-normal-state-map "," comma-leader-map)


(defvar bracket-leader-map (make-sparse-keymap)
  "Keymap for \"leader key\" shortcuts.")
(define-key evil-normal-state-map "[" bracket-leader-map)

(defun my-run-latex ()
  (interactive)
  (TeX-save-document (TeX-master-file))
  (TeX-command "latexmk" 'TeX-master-file -1))


(define-key comma-leader-map "lr" 'my-run-latex)
(define-key comma-leader-map "ls" 'TeX-view)

(define-key comma-leader-map "bn" 'next-buffer)
(define-key comma-leader-map "bp" 'previous-buffer)


;; change the "leader" key to space
;; (define-key evil-normal-state-map "," 'evil-repeat-find-char-reverse)
;; (define-key evil-normal-state-map (kbd "SPC") comma-leader-map)

(defun close-and-kill-this-pane ()
      "If there are multiple windows, then close this pane and kill the buffer in it also."
      (interactive)
      (kill-this-buffer)
      (if (not (one-window-p))
          (delete-window)))

(define-key comma-leader-map "bd" 'close-and-kill-this-pane)
(define-key comma-leader-map "x" 'save-buffers-kill-emacs)
(define-key comma-leader-map "f" 'neotree-toggle)

#+END_SRC

*** column indicator

#+BEGIN_SRC emacs-lisp
(require 'fill-column-indicator)
(setq fci-rule-width 1)
(setq fci-rule-column 80)
(add-hook 'after-change-major-mode-hook 'fci-mode)
(setq fci-rule-color "#a4adbc")
(setq fci-rule-character ?\u2502)
#+END_SRC

*** Helm

#+BEGIN_SRC emacs-lisp
(require 'helm)
(require 'helm-bibtex)
(setq helm-for-files-preferred-list '(helm-source-buffers-list
                                      helm-source-buffer-not-found
                                      helm-source-recentf
                                      helm-source-bookmarks
                                      helm-source-file-cache
                                      helm-source-files-in-current-dir
                                      ))

(define-key evil-normal-state-map (kbd "C-p") 'helm-multi-files)

(define-key helm-map (kbd "C-j") 'helm-next-line)
(define-key helm-map (kbd "C-k") 'helm-previous-line)
(autoload 'helm-bibtex "helm-bibtex" "" t)
(setq bibtex-completion-bibliography
      '("./thesis.bib"))
(setq helm-bibtex-bibliography '("./thesis.bib"))
#+END_SRC

*** Flycheck

#+BEGIN_SRC emacs-lisp
(package-install 'flycheck)
(global-flycheck-mode)
(exec-path-from-shell-initialize)
#+END_SRC

*** Flyspell

#+BEGIN_SRC emacs-lisp
(require 'flyspell)
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
#+END_SRC

*** Magit

Git support for Emacs

#+BEGIN_SRC emacs-lisp
(require 'evil-magit)
#+END_SRC

*** Org

Archiving.

#+BEGIN_SRC emacs-lisp
(setq org-archive-mark-done nil)
(setq org-archive-location "%s_archive::* Archived Tasks")
(require 'org-journal)
#+END_SRC

Org Journal.

#+BEGIN_SRC emacs-lisp
(require 'org-journal)
#+END_SRC

Pretty org bullets.

#+BEGIN_SRC emacs-lisp
(require 'org)
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

Evil keybindings.

#+BEGIN_SRC emacs-lisp
(require 'evil-org)
(add-hook 'org-mode-hook 'evil-org-mode)
(evil-org-set-key-theme '(navigation insert textobjects additional calendar))
(require 'evil-org-agenda)
(evil-org-agenda-set-keys)
#+END_SRC

Arrow that point downwards instead of ellipsis in org mode.

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "⤵")
#+END_SRC


Syntax highlighting for blocks while editing

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Task Management settings.

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")

(defun org-file-path (filename)
  "Return the absolute address of an org file, given its relative name."
  (concat (file-name-as-directory org-directory) filename))

(setq org-index-file (org-file-path "index.org"))
(setq org-archive-location
      (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC

Global todo lists.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (read-lines "~/todo.txt"))
#+END_SRC




Archiving time.

#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

*** Proselint

A linter for prose.

#+BEGIN_SRC emacs-lisp
(flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
	    (id (one-or-more (not (any " "))))
	    (message) line-end))
  :modes (text-mode markdown-mode gfm-mode))

(add-to-list 'flycheck-checkers 'proselint)
#+END_SRC

